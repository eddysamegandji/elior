openapi: 3.0.3

info:
  title: elior
  description: Internal API
  contact:
    name: Eddy Amegandji
    email: eddy.amegandji@foundever.com
  version: 1.0.0-SNAPSHOT

servers:
  - url: http://localhost:8080
    description: local development

paths:
  /accounting:
    get:
      summary: "Get all accountings"
      tags:
        - accountingResource
      operationId: getAccountings
      responses:
        200:
          description: "List retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Accounting'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Create Accounting"
      tags:
        - accountingResource
      operationId: createAccounting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Accounting'
      responses:
        201:
          description: "A detailed accounting"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accounting'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        409:
          $ref: '#/components/responses/ConflictAlreadyExisting'
        500:
          $ref: "#/components/responses/InternalServerError"

  /accounting/{id}:
    delete:
      summary: Delete accounting
      tags:
        - accountingResource
      operationId: deleteAccounting
      parameters:
        - name: id
          description: "id of the accounting"
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: "No content"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: "#/components/responses/InternalServerError"

  /accountings:
    get:
      summary: "Get all accountings"
      tags:
        - accountingResource
      operationId: getAccountingsWithRange
      parameters:
        - name: startDate
          in: query
          description: Start date of the range
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date of the range
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: "List retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Accounting'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: "#/components/responses/InternalServerError"

  /product:
    get:
      summary: "Get all products"
      tags:
        - productResource
      operationId: getProducts
      responses:
        200:
          description: "List retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Create product"
      tags:
        - productResource
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        201:
          description: "A detailed product"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        409:
          $ref: '#/components/responses/ConflictAlreadyExisting'
        500:
          $ref: "#/components/responses/InternalServerError"

  /product/{id}:
    put:
      summary: Update a product
      tags:
        - productResource
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the product
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Updated product information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid request body
        '404':
          description: Product not found

    delete:
      summary: Delete product
      tags:
        - productResource
      operationId: deleteProduct
      parameters:
        - name: id
          description: "id of the product"
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: "No content"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: "#/components/responses/InternalServerError"


components:
  responses:
    BadRequest:
      description: |
        Bad Request due to invalid inputs.
        Exhaustive list of possible errors keys:
          - web-api-library.error.argument-validation-failed: One or multiple parameters don't respect contract constraints.
          - web-api-library.error.request-message-not-readable: Http message not readable.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorDelivery'
    Unauthorized:
      description: "Unauthorized access without valid authentication."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorDelivery'
    Forbidden:
      description: "Forbidden access because of missing authorization."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorDelivery'
    NotFound:
      description: "Resource not found."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorDelivery'
    ConflictAlreadyExisting:
      description: "Resource already exist."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorDelivery'
    InternalServerError:
      description: "Technical error occurred."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorDelivery'
  schemas:
    ApiErrorDelivery:
      type: object
      properties:
        status:
          type: integer
        error:
          type: string
        path:
          type: string
        timestamp:
          type: number
          format: double
        message:
          type: string

    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        unitPurchasePrice:
          type: number
          format: double

    Article:
      type: object
      properties:
        id:
          type: integer
          format: int64
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
        totalArticlePurchasePrice:
          type: number
          format: double
        sellingPrice:
          type: number
          format: double
        discount:
          type: number
          format: double
        benefit:
          type: number
          format: double
        date:
          type: string
          format: date
        accounting:
          type: object
          properties:
            id:
              type: integer
              format: int64

    Expense:
      type: object
      properties:
        id:
          type: integer
          format: int64
        denomination:
          type: string
        price:
          type: number
          format: double
        expenseDate:
          type: string
          format: date
        accounting:
          type: object
          properties:
            id:
              type: integer
              format: int64

    Accounting:
      type: object
      properties:
        id:
          type: integer
          format: int64
        eventName:
          type: string
        eventDate:
          type: string
          format: date
        employeeName:
          type: string
        flooz:
          type: number
          format: double
        tmoney:
          type: number
          format: double
        unpaid:
          type: number
          format: double
        totalPurcharsePrice:
          type: number
          format: double
        totalSellingPrice:
          type: number
          format: double
        organizerPercent:
          type: integer
        eventOrganizerCommission:
          type: number
          format: double
        totalBenefit:
          type: number
          format: double
        realBenefit:
          type: number
          format: double
        pureExpense:
          type: number
          format: double
        totalExpense:
          type: number
          format: double
        articles:
          type: array
          items:
            $ref: '#/components/schemas/Article'
        expenses:
          type: array
          items:
            $ref: '#/components/schemas/Expense'
